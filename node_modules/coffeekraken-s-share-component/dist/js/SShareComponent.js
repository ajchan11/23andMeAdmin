Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _SAnchorWebComponent2 = require('coffeekraken-sugar/js/core/SAnchorWebComponent');

var _SAnchorWebComponent3 = _interopRequireDefault(_SAnchorWebComponent2);

var _sharerNpm = require('sharer.npm.js');

var _sharerNpm2 = _interopRequireDefault(_sharerNpm);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @name 	SShareComponent
 * @extends 	SAnchorWebComponent
 * Easily create some share buttons to target facebook, twitter, linkedin, google+, etc...
 *
 * @example 	html
 * <a is="s-share" href="#" network="facebook" title="Share on facebook">
 * 	Share on facebook
 * </a>
 *
 * @author 	Olivier Bossel <olivier.bossel@gmail.com>
 */

var SShareComponent = function (_SAnchorWebComponent) {
	_inherits(SShareComponent, _SAnchorWebComponent);

	function SShareComponent() {
		_classCallCheck(this, SShareComponent);

		return _possibleConstructorReturn(this, (SShareComponent.__proto__ || Object.getPrototypeOf(SShareComponent)).apply(this, arguments));
	}

	_createClass(SShareComponent, [{
		key: 'componentWillMount',


		/**
   * Component will mount
  	 * @definition 		SWebComponent.componentWillMount
   * @protected
   */
		value: function componentWillMount() {
			_get(SShareComponent.prototype.__proto__ || Object.getPrototypeOf(SShareComponent.prototype), 'componentWillMount', this).call(this);
		}

		/**
   * Mount component
   * @definition 		SWebComponent.componentMount
   * @protected
   */

	}, {
		key: 'componentMount',
		value: function componentMount() {
			_get(SShareComponent.prototype.__proto__ || Object.getPrototypeOf(SShareComponent.prototype), 'componentMount', this).call(this);

			// list all attributes available for each networks
			this._networkAttrs = {
				twitter: ['title', 'url', 'hashtags', 'via'],
				facebook: ['url'],
				linkedin: ['url'],
				googleplus: ['url'],
				email: ['title', 'url', 'to', 'subject'],
				whatsapp: ['title', 'url'],
				telegram: ['title', 'url'],
				viber: ['title', 'url'],
				pinterest: ['url', 'image', 'description'],
				tumblr: ['url', 'title', 'caption', 'tags'],
				hackernews: ['url', 'title'],
				reddit: ['url'],
				vk: ['url', 'title', 'image', 'caption'],
				buffer: ['url', 'title', 'via', 'picture'],
				xing: ['url', 'title'],
				line: ['url', 'title'],
				instapaper: ['url', 'title', 'description'],
				pocket: ['url'],
				digg: ['url'],
				stumbleupon: ['title', 'url'],
				flipboard: ['title', 'url'],
				weibo: ['url', 'title', 'image', 'apikey', 'relateui'],
				renren: ['url'],
				myspace: ['url', 'title', 'description'],
				blogger: ['url', 'title', 'description'],
				baidu: ['url', 'title'],
				okru: ['url', 'title']
			};

			// listen for click on the element
			this.addEventListener('click', this._onClick.bind(this));
		}

		/**
   * Component unmount
   * @definition 		SWebComponent.componentUnmount
   * @protected
   */

	}, {
		key: 'componentUnmount',
		value: function componentUnmount() {
			_get(SShareComponent.prototype.__proto__ || Object.getPrototypeOf(SShareComponent.prototype), 'componentUnmount', this).call(this);
		}

		/**
   * Component will receive prop
   * @definition 		SWebComponent.componentWillReceiveProp
   * @protected
   */

	}, {
		key: 'componentWillReceiveProp',
		value: function componentWillReceiveProp(name, newVal, oldVal) {
			switch (name) {}
		}

		/**
   * Render the component
   * Here goes the code that reflect the this.props state on the actual html element
   * @definition 		SWebComponent.render
   * @protected
   */

	}, {
		key: 'render',
		value: function render() {
			_get(SShareComponent.prototype.__proto__ || Object.getPrototypeOf(SShareComponent.prototype), 'render', this).call(this);
		}

		/**
   * Get default share attributes
   * @param 		{String} 		attr 		The attribute name to process
   * @return 		{String} 					The default attribute
   */

	}, {
		key: '_getDefaultShareAttriute',
		value: function _getDefaultShareAttriute(attr) {
			switch (attr) {
				case 'title':
				case 'subject':
				case 'caption':
					return document.title;
					break;
				case 'description':
					var descElm = document.querySelector('meta[name="description"]');
					if (descElm && descElm.content) return descElm.content;
					break;
				case 'url':
					var href = this.getAttribute('href');
					return href && href !== '#' ? href : document.location.href;
					break;
			}
			return null;
		}

		/**
   * Handle click
   * @param 		{Event} 		e 		The click event
   */

	}, {
		key: '_onClick',
		value: function _onClick(e) {
			var _this2 = this;

			e.preventDefault();
			// loop on network attributes
			if (!this._networkAttrs[this.props.network]) return;
			this.setAttribute('data-sharer', this.props.network);
			this._networkAttrs[this.props.network].forEach(function (attr) {
				if (_this2.hasAttribute('data-' + attr)) return;
				var val = _this2.props[attr];
				if (!val) {
					val = _this2._getDefaultShareAttriute(attr);
				}
				if (val) {
					_this2.setAttribute('data-' + attr, val);
				}
			});

			// create a new sharer
			var sharer = new _sharerNpm2.default(this);
			sharer.share();
		}
	}], [{
		key: 'defaultCss',


		/**
   * Css
   * @protected
   */
		value: function defaultCss(componentName, componentNameDash) {
			return '\n\t\t\t' + componentNameDash + ' {\n\t\t\t\tcursor: pointer;\n\t\t\t}\n\t\t';
		}
	}, {
		key: 'defaultProps',


		/**
   * Default props
   * @definition 		SWebComponent.defaultProps
   * @protected
   */
		get: function get() {
			return {
				/**
     * On which network to share the content
     * @prop
     * @type 		{String}
     * @values 		twitter, facebook, linkedin, googleplus, email, whatsapp, telegram, viber, pinterest, tumblr, hackernews, reddit, vk, buffer, xing, line, instapaper, pocket, digg, stumbleupon, flipboard, weibo, renren, myspace, blogger, baidu, okru
     */
				network: null,

				/**
     * Set the title to share
     * @prop
     * @type 		{String}
     * @default 	document.title
     */
				title: null,

				/**
     * Set the url to share
     * @prop
     * @type 		{String}
     * @default 	document.location.href
     */
				url: null,

				/**
     * Set a username to tweet through without @
     * @prop
     * @type 		{String}
     */
				via: null,

				/**
     * Set some hashtags to add to tweet comma separated without #
     * @prop
     * @type 		{String}
     */
				hashtags: null,

				/**
     * Set an email address to share to
     * @prop
     * @type 		{String}
     */
				to: null,

				/**
     * Set the email subject
     * @prop
     * @type 		{String}
     * @default 	document.title
     */
				subject: null,

				/**
     * Set the absolute image url to share through (pinterest,vk,weibo)
     * @prop
     * @type 		{String}
     */
				image: null,

				/**
     * Set the description to share (pinterest,instapaper,myspace,blogger,)
     * @prop
     * @type 		{String}
     * @default 	meta[description]
     */
				description: null,

				/**
     * Set the caption to share (tumblr,vk)
     * @prop
     * @type 		{String}
     * @default 	document.title
     */
				caption: null,

				/**
     * Set the tags to share comma separated (tumblr)
     * @prop
     * @type 		{String}
     */
				tags: null
			};
		}

		/**
   * Required props
   * @definition 		SWebComponent.requiredProps
   * @protected
   */

	}, {
		key: 'requiredProps',
		get: function get() {
			return ['network'];
		}
	}]);

	return SShareComponent;
}(_SAnchorWebComponent3.default);

exports.default = SShareComponent;